-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gcc_phat_bitselect_1ns_32ns_5ns_1_1_0 is
generic (
    ADDRWIDTH : INTEGER := 5;
    DATAWIDTH : INTEGER := 32
);
port (

    sel   : in std_logic_vector (ADDRWIDTH-1 downto 0);
    din   : in std_logic_vector (DATAWIDTH-1 downto 0);
    dout  : out std_logic_vector (0 downto 0)
);
end entity;

architecture behav of gcc_phat_bitselect_1ns_32ns_5ns_1_1_0 is
    signal dout_tmp : std_logic_vector (0 downto 0);

    signal sel_integer : integer;
begin
    sel_integer <= to_integer(unsigned(sel));
    process(din,sel_integer) is
    begin
        case sel_integer is
            
            when 0 =>
                dout_tmp(0) <= din(0);
            
            when 1 =>
                dout_tmp(0) <= din(1);
            
            when 2 =>
                dout_tmp(0) <= din(2);
            
            when 3 =>
                dout_tmp(0) <= din(3);
            
            when 4 =>
                dout_tmp(0) <= din(4);
            
            when 5 =>
                dout_tmp(0) <= din(5);
            
            when 6 =>
                dout_tmp(0) <= din(6);
            
            when 7 =>
                dout_tmp(0) <= din(7);
            
            when 8 =>
                dout_tmp(0) <= din(8);
            
            when 9 =>
                dout_tmp(0) <= din(9);
            
            when 10 =>
                dout_tmp(0) <= din(10);
            
            when 11 =>
                dout_tmp(0) <= din(11);
            
            when 12 =>
                dout_tmp(0) <= din(12);
            
            when 13 =>
                dout_tmp(0) <= din(13);
            
            when 14 =>
                dout_tmp(0) <= din(14);
            
            when 15 =>
                dout_tmp(0) <= din(15);
            
            when 16 =>
                dout_tmp(0) <= din(16);
            
            when 17 =>
                dout_tmp(0) <= din(17);
            
            when 18 =>
                dout_tmp(0) <= din(18);
            
            when 19 =>
                dout_tmp(0) <= din(19);
            
            when 20 =>
                dout_tmp(0) <= din(20);
            
            when 21 =>
                dout_tmp(0) <= din(21);
            
            when 22 =>
                dout_tmp(0) <= din(22);
            
            when 23 =>
                dout_tmp(0) <= din(23);
            
            when 24 =>
                dout_tmp(0) <= din(24);
            
            when 25 =>
                dout_tmp(0) <= din(25);
            
            when 26 =>
                dout_tmp(0) <= din(26);
            
            when 27 =>
                dout_tmp(0) <= din(27);
            
            when 28 =>
                dout_tmp(0) <= din(28);
            
            when 29 =>
                dout_tmp(0) <= din(29);
            
            when 30 =>
                dout_tmp(0) <= din(30);
            
            when 31 =>
                dout_tmp(0) <= din(31);
            
            when others => 
                dout_tmp(0) <= 'X';
        end case;
    end process;


    dout <= dout_tmp;




end architecture;
