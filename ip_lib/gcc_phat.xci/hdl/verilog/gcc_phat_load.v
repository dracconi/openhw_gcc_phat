// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gcc_phat_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_stream_in_din,
        fft_stream_in_full_n,
        fft_stream_in_write,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] fft_stream_in_din;
input   fft_stream_in_full_n;
output   fft_stream_in_write;
output  [9:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;

reg ap_idle;
reg fft_stream_in_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fft_stream_in_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] src_load_reg_573;
reg   [0:0] tmp_reg_580;
reg   [0:0] tmp_reg_580_pp0_iter2_reg;
wire   [0:0] icmp_ln63_fu_189_p2;
reg   [0:0] icmp_ln63_reg_586;
reg    ap_block_pp0_stage0_11001_grp1;
reg   [0:0] icmp_ln63_reg_586_pp0_iter3_reg;
reg   [0:0] icmp_ln63_reg_586_pp0_iter4_reg;
wire   [15:0] select_ln63_fu_199_p3;
reg   [15:0] select_ln63_reg_591;
wire   [4:0] zext_ln63_fu_217_p1;
reg   [4:0] zext_ln63_reg_596;
wire   [4:0] add_ln63_fu_221_p2;
reg   [4:0] add_ln63_reg_601;
wire   [31:0] LD_fu_303_p1;
reg   [31:0] LD_reg_606;
wire   [62:0] trunc_ln63_1_fu_322_p1;
reg   [62:0] trunc_ln63_1_reg_616;
reg   [0:0] tmp_38_reg_621;
reg   [0:0] tmp_38_reg_621_pp0_iter6_reg;
reg   [10:0] tmp_31_reg_627;
wire   [51:0] trunc_ln63_2_fu_342_p1;
reg   [51:0] trunc_ln63_2_reg_632;
wire   [53:0] select_ln63_2_fu_366_p3;
reg   [53:0] select_ln63_2_reg_637;
wire   [0:0] icmp_ln63_1_fu_373_p2;
reg   [0:0] icmp_ln63_1_reg_642;
reg   [0:0] icmp_ln63_1_reg_642_pp0_iter7_reg;
wire   [0:0] icmp_ln63_2_fu_398_p2;
reg   [0:0] icmp_ln63_2_reg_649;
reg   [0:0] icmp_ln63_2_reg_649_pp0_iter7_reg;
wire   [10:0] select_ln63_3_fu_416_p3;
reg   [10:0] select_ln63_3_reg_654;
wire   [0:0] icmp_ln63_3_fu_424_p2;
reg   [0:0] icmp_ln63_3_reg_661;
reg   [0:0] icmp_ln63_3_reg_661_pp0_iter7_reg;
wire   [31:0] trunc_ln63_4_fu_430_p1;
reg   [31:0] trunc_ln63_4_reg_667;
reg   [31:0] trunc_ln63_4_reg_667_pp0_iter7_reg;
wire   [0:0] icmp_ln63_5_fu_444_p2;
reg   [0:0] icmp_ln63_5_reg_673;
wire   [31:0] select_ln63_4_fu_477_p3;
reg   [31:0] select_ln63_4_reg_678;
wire   [31:0] select_ln63_5_fu_490_p3;
reg   [31:0] select_ln63_5_reg_683;
wire   [63:0] zext_ln62_fu_171_p1;
wire    ap_block_pp0_stage0;
reg   [10:0] i_fu_124;
wire   [10:0] add_ln62_fu_165_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_5;
reg    ap_block_pp0_stage0_01001_grp1;
reg    src_ce0_local;
wire   [31:0] grp_fu_148_p0;
wire   [15:0] sub_ln63_fu_194_p2;
wire   [15:0] tmp_s_fu_205_p1;
wire   [15:0] tmp_s_fu_205_p3;
wire   [3:0] trunc_ln63_fu_213_p1;
wire   [39:0] zext_ln63_1_fu_227_p1;
wire   [39:0] zext_ln63_2_fu_230_p1;
wire   [39:0] shl_ln63_fu_233_p2;
wire   [38:0] lshr_ln_fu_239_p4;
wire   [0:0] tmp_37_fu_253_p3;
wire   [4:0] sub_ln63_1_fu_269_p2;
wire   [7:0] select_ln63_1_fu_261_p3;
wire  signed [7:0] sext_ln63_fu_274_p1;
wire   [7:0] add_ln63_1_fu_278_p2;
wire   [63:0] zext_ln63_4_fu_249_p1;
wire   [8:0] tmp_30_fu_284_p3;
wire   [63:0] pi_assign_fu_291_p5;
wire   [63:0] grp_fu_148_p1;
wire   [63:0] bitcast_ln735_fu_311_p1;
wire   [63:0] select_ln735_fu_315_p3;
wire   [52:0] zext_ln63_7_cast_fu_349_p3;
wire   [53:0] zext_ln63_7_fu_356_p1;
wire   [53:0] sub_ln63_2_fu_360_p2;
wire   [11:0] zext_ln63_3_fu_346_p1;
wire   [11:0] sub_ln63_3_fu_378_p2;
wire   [6:0] tmp_39_fu_388_p4;
wire   [10:0] trunc_ln63_3_fu_384_p1;
wire   [10:0] add_ln63_2_fu_404_p2;
wire   [10:0] sub_ln63_4_fu_410_p2;
wire   [5:0] tmp_40_fu_434_p4;
wire   [53:0] zext_ln63_5_fu_465_p1;
wire   [53:0] ashr_ln63_fu_468_p2;
wire   [0:0] icmp_ln63_4_fu_453_p2;
wire   [31:0] trunc_ln63_5_fu_473_p1;
wire   [31:0] select_ln63_6_fu_458_p3;
wire   [31:0] zext_ln63_8_fu_450_p1;
wire   [31:0] shl_ln63_1_fu_485_p2;
wire   [0:0] xor_ln63_fu_497_p2;
wire   [0:0] or_ln63_fu_507_p2;
wire   [0:0] xor_ln63_1_fu_511_p2;
wire   [0:0] and_ln63_fu_502_p2;
wire   [0:0] and_ln63_1_fu_517_p2;
wire   [31:0] storemerge4_i_fu_531_p9;
wire   [2:0] storemerge4_i_fu_531_p10;
wire   [31:0] storemerge4_i_fu_531_p11;
reg    grp_fu_148_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [15:0] tmp_s_fu_205_p0;
wire   [0:0] tmp_s_fu_205_p2;
wire  signed [2:0] storemerge4_i_fu_531_p1;
wire   [2:0] storemerge4_i_fu_531_p3;
wire   [2:0] storemerge4_i_fu_531_p5;
wire   [2:0] storemerge4_i_fu_531_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 i_fu_124 = 11'd0;
#0 ap_done_reg = 1'b0;
end

gcc_phat_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .ce(grp_fu_148_ce),
    .dout(grp_fu_148_p1)
);

gcc_phat_ctlz_16_16_1_1 #(
    .din_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ctlz_16_16_1_1_U7(
    .din(tmp_s_fu_205_p1),
    .dout(tmp_s_fu_205_p3)
);

(* dissolve_hierarchy = "yes" *) gcc_phat_sparsemux_9_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_9_3_32_1_1_U8(
    .din0(32'd0),
    .din1(trunc_ln63_4_reg_667_pp0_iter7_reg),
    .din2(select_ln63_4_reg_678),
    .din3(select_ln63_5_reg_683),
    .def(storemerge4_i_fu_531_p9),
    .sel(storemerge4_i_fu_531_p10),
    .dout(storemerge4_i_fu_531_p11)
);

gcc_phat_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_124 <= add_ln62_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_124 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        LD_reg_606 <= LD_fu_303_p1;
        add_ln63_reg_601 <= add_ln63_fu_221_p2;
        icmp_ln63_1_reg_642 <= icmp_ln63_1_fu_373_p2;
        icmp_ln63_1_reg_642_pp0_iter7_reg <= icmp_ln63_1_reg_642;
        icmp_ln63_2_reg_649 <= icmp_ln63_2_fu_398_p2;
        icmp_ln63_2_reg_649_pp0_iter7_reg <= icmp_ln63_2_reg_649;
        icmp_ln63_3_reg_661 <= icmp_ln63_3_fu_424_p2;
        icmp_ln63_3_reg_661_pp0_iter7_reg <= icmp_ln63_3_reg_661;
        icmp_ln63_5_reg_673 <= icmp_ln63_5_fu_444_p2;
        icmp_ln63_reg_586 <= icmp_ln63_fu_189_p2;
        icmp_ln63_reg_586_pp0_iter3_reg <= icmp_ln63_reg_586;
        icmp_ln63_reg_586_pp0_iter4_reg <= icmp_ln63_reg_586_pp0_iter3_reg;
        select_ln63_2_reg_637 <= select_ln63_2_fu_366_p3;
        select_ln63_3_reg_654 <= select_ln63_3_fu_416_p3;
        select_ln63_4_reg_678 <= select_ln63_4_fu_477_p3;
        select_ln63_5_reg_683 <= select_ln63_5_fu_490_p3;
        select_ln63_reg_591 <= select_ln63_fu_199_p3;
        tmp_31_reg_627 <= {{select_ln735_fu_315_p3[62:52]}};
        tmp_38_reg_621 <= select_ln735_fu_315_p3[32'd63];
        tmp_38_reg_621_pp0_iter6_reg <= tmp_38_reg_621;
        trunc_ln63_1_reg_616 <= trunc_ln63_1_fu_322_p1;
        trunc_ln63_2_reg_632 <= trunc_ln63_2_fu_342_p1;
        trunc_ln63_4_reg_667 <= trunc_ln63_4_fu_430_p1;
        trunc_ln63_4_reg_667_pp0_iter7_reg <= trunc_ln63_4_reg_667;
        zext_ln63_reg_596[3 : 0] <= zext_ln63_fu_217_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        src_load_reg_573 <= src_q0;
        tmp_reg_580 <= src_q0[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        tmp_reg_580_pp0_iter2_reg <= tmp_reg_580;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_5 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        fft_stream_in_blk_n = fft_stream_in_full_n;
    end else begin
        fft_stream_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        fft_stream_in_write = 1'b1;
    end else begin
        fft_stream_in_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_148_ce = 1'b1;
    end else begin
        grp_fu_148_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_303_p1 = pi_assign_fu_291_p5[31:0];

assign add_ln62_fu_165_p2 = (ap_sig_allocacmp_i_5 + 11'd1);

assign add_ln63_1_fu_278_p2 = ($signed(select_ln63_1_fu_261_p3) + $signed(sext_ln63_fu_274_p1));

assign add_ln63_2_fu_404_p2 = ($signed(trunc_ln63_3_fu_384_p1) + $signed(11'd2017));

assign add_ln63_fu_221_p2 = (zext_ln63_fu_217_p1 + 5'd9);

assign and_ln63_1_fu_517_p2 = (xor_ln63_1_fu_511_p2 & icmp_ln63_2_reg_649_pp0_iter7_reg);

assign and_ln63_fu_502_p2 = (xor_ln63_fu_497_p2 & icmp_ln63_3_reg_661_pp0_iter7_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ashr_ln63_fu_468_p2 = $signed(select_ln63_2_reg_637) >>> zext_ln63_5_fu_465_p1;

assign bitcast_ln735_fu_311_p1 = grp_fu_148_p1;

assign fft_stream_in_din = storemerge4_i_fu_531_p11;

assign grp_fu_148_p0 = LD_reg_606;

assign icmp_ln62_fu_159_p2 = ((ap_sig_allocacmp_i_5 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln63_1_fu_373_p2 = ((trunc_ln63_1_reg_616 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_2_fu_398_p2 = (($signed(tmp_39_fu_388_p4) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign icmp_ln63_3_fu_424_p2 = ((sub_ln63_3_fu_378_p2 == 12'd31) ? 1'b1 : 1'b0);

assign icmp_ln63_4_fu_453_p2 = ((select_ln63_3_reg_654 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln63_5_fu_444_p2 = ((tmp_40_fu_434_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_189_p2 = ((src_load_reg_573 == 16'd0) ? 1'b1 : 1'b0);

assign lshr_ln_fu_239_p4 = {{shl_ln63_fu_233_p2[39:1]}};

assign or_ln63_fu_507_p2 = (icmp_ln63_3_reg_661_pp0_iter7_reg | icmp_ln63_1_reg_642_pp0_iter7_reg);

assign pi_assign_fu_291_p5 = {{zext_ln63_4_fu_249_p1[63:32]}, {tmp_30_fu_284_p3}, {zext_ln63_4_fu_249_p1[22:0]}};

assign select_ln63_1_fu_261_p3 = ((tmp_37_fu_253_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln63_2_fu_366_p3 = ((tmp_38_reg_621[0:0] == 1'b1) ? sub_ln63_2_fu_360_p2 : zext_ln63_7_fu_356_p1);

assign select_ln63_3_fu_416_p3 = ((icmp_ln63_2_fu_398_p2[0:0] == 1'b1) ? add_ln63_2_fu_404_p2 : sub_ln63_4_fu_410_p2);

assign select_ln63_4_fu_477_p3 = ((icmp_ln63_4_fu_453_p2[0:0] == 1'b1) ? trunc_ln63_5_fu_473_p1 : select_ln63_6_fu_458_p3);

assign select_ln63_5_fu_490_p3 = ((icmp_ln63_5_reg_673[0:0] == 1'b1) ? shl_ln63_1_fu_485_p2 : 32'd0);

assign select_ln63_6_fu_458_p3 = ((tmp_38_reg_621_pp0_iter6_reg[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln63_fu_199_p3 = ((tmp_reg_580[0:0] == 1'b1) ? sub_ln63_fu_194_p2 : src_load_reg_573);

assign select_ln735_fu_315_p3 = ((icmp_ln63_reg_586_pp0_iter4_reg[0:0] == 1'b1) ? 64'd0 : bitcast_ln735_fu_311_p1);

assign sext_ln63_fu_274_p1 = $signed(sub_ln63_1_fu_269_p2);

assign shl_ln63_1_fu_485_p2 = trunc_ln63_4_reg_667 << zext_ln63_8_fu_450_p1;

assign shl_ln63_fu_233_p2 = zext_ln63_1_fu_227_p1 << zext_ln63_2_fu_230_p1;

assign src_address0 = zext_ln62_fu_171_p1;

assign src_ce0 = src_ce0_local;

assign storemerge4_i_fu_531_p10 = {{{icmp_ln63_1_reg_642_pp0_iter7_reg}, {and_ln63_fu_502_p2}}, {and_ln63_1_fu_517_p2}};

assign storemerge4_i_fu_531_p9 = 'bx;

assign sub_ln63_1_fu_269_p2 = (5'd1 - zext_ln63_reg_596);

assign sub_ln63_2_fu_360_p2 = (54'd0 - zext_ln63_7_fu_356_p1);

assign sub_ln63_3_fu_378_p2 = (12'd1075 - zext_ln63_3_fu_346_p1);

assign sub_ln63_4_fu_410_p2 = (11'd31 - trunc_ln63_3_fu_384_p1);

assign sub_ln63_fu_194_p2 = (16'd0 - src_load_reg_573);

assign tmp_30_fu_284_p3 = {{tmp_reg_580_pp0_iter2_reg}, {add_ln63_1_fu_278_p2}};

assign tmp_37_fu_253_p3 = shl_ln63_fu_233_p2[32'd25];

assign tmp_39_fu_388_p4 = {{sub_ln63_3_fu_378_p2[11:5]}};

assign tmp_40_fu_434_p4 = {{select_ln63_3_fu_416_p3[10:5]}};

assign tmp_s_fu_205_p1 = ((tmp_reg_580[0:0] == 1'b1) ? sub_ln63_fu_194_p2 : src_load_reg_573);

assign trunc_ln63_1_fu_322_p1 = select_ln735_fu_315_p3[62:0];

assign trunc_ln63_2_fu_342_p1 = select_ln735_fu_315_p3[51:0];

assign trunc_ln63_3_fu_384_p1 = sub_ln63_3_fu_378_p2[10:0];

assign trunc_ln63_4_fu_430_p1 = select_ln63_2_fu_366_p3[31:0];

assign trunc_ln63_5_fu_473_p1 = ashr_ln63_fu_468_p2[31:0];

assign trunc_ln63_fu_213_p1 = tmp_s_fu_205_p3[3:0];

assign xor_ln63_1_fu_511_p2 = (or_ln63_fu_507_p2 ^ 1'd1);

assign xor_ln63_fu_497_p2 = (icmp_ln63_1_reg_642_pp0_iter7_reg ^ 1'd1);

assign zext_ln62_fu_171_p1 = ap_sig_allocacmp_i_5;

assign zext_ln63_1_fu_227_p1 = select_ln63_reg_591;

assign zext_ln63_2_fu_230_p1 = add_ln63_reg_601;

assign zext_ln63_3_fu_346_p1 = tmp_31_reg_627;

assign zext_ln63_4_fu_249_p1 = lshr_ln_fu_239_p4;

assign zext_ln63_5_fu_465_p1 = select_ln63_3_reg_654;

assign zext_ln63_7_cast_fu_349_p3 = {{1'd1}, {trunc_ln63_2_reg_632}};

assign zext_ln63_7_fu_356_p1 = zext_ln63_7_cast_fu_349_p3;

assign zext_ln63_8_fu_450_p1 = select_ln63_3_reg_654;

assign zext_ln63_fu_217_p1 = trunc_ln63_fu_213_p1;

always @ (posedge ap_clk) begin
    zext_ln63_reg_596[4] <= 1'b0;
end

endmodule //gcc_phat_load
