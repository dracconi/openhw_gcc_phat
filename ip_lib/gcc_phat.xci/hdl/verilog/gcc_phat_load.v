// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gcc_phat_load (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fft_stream_in_din,
        fft_stream_in_full_n,
        fft_stream_in_write,
        src_address0,
        src_ce0,
        src_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [63:0] fft_stream_in_din;
input   fft_stream_in_full_n;
output   fft_stream_in_write;
output  [9:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;

reg ap_idle;
reg fft_stream_in_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln64_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fft_stream_in_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln65_fu_181_p2;
reg   [0:0] icmp_ln65_reg_579;
reg   [0:0] icmp_ln65_reg_579_pp0_iter2_reg;
reg   [0:0] icmp_ln65_reg_579_pp0_iter3_reg;
wire   [0:0] tmp_fu_187_p3;
reg   [0:0] tmp_reg_584;
wire   [15:0] select_ln65_fu_201_p3;
reg   [15:0] select_ln65_reg_589;
wire   [3:0] trunc_ln65_fu_217_p1;
reg   [3:0] trunc_ln65_reg_594;
wire   [31:0] LD_fu_308_p1;
reg   [31:0] LD_reg_599;
reg    ap_block_pp0_stage0_11001_grp1;
wire   [62:0] trunc_ln65_1_fu_327_p1;
reg   [62:0] trunc_ln65_1_reg_609;
reg   [0:0] tmp_38_reg_614;
reg   [0:0] tmp_38_reg_614_pp0_iter5_reg;
reg   [10:0] tmp_31_reg_620;
wire   [51:0] trunc_ln65_2_fu_347_p1;
reg   [51:0] trunc_ln65_2_reg_625;
wire   [53:0] select_ln65_2_fu_371_p3;
reg   [53:0] select_ln65_2_reg_630;
wire   [0:0] icmp_ln65_1_fu_378_p2;
reg   [0:0] icmp_ln65_1_reg_635;
wire   [0:0] icmp_ln65_2_fu_403_p2;
reg   [0:0] icmp_ln65_2_reg_642;
wire   [10:0] select_ln65_3_fu_421_p3;
reg   [10:0] select_ln65_3_reg_647;
wire   [0:0] icmp_ln65_3_fu_429_p2;
reg   [0:0] icmp_ln65_3_reg_654;
wire   [31:0] trunc_ln65_4_fu_435_p1;
reg   [31:0] trunc_ln65_4_reg_660;
wire   [0:0] icmp_ln65_5_fu_449_p2;
reg   [0:0] icmp_ln65_5_reg_666;
wire   [31:0] storemerge4_i_fu_536_p11;
reg   [31:0] storemerge4_i_reg_671;
wire   [63:0] zext_ln64_fu_171_p1;
wire    ap_block_pp0_stage0;
reg   [10:0] i_fu_124;
wire   [10:0] add_ln64_fu_165_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_5;
reg    ap_block_pp0_stage0_01001_grp1;
reg    src_ce0_local;
wire   [31:0] grp_fu_148_p0;
wire   [15:0] sub_ln65_fu_195_p2;
wire   [15:0] tmp_s_fu_209_p1;
wire   [15:0] tmp_s_fu_209_p3;
wire   [4:0] zext_ln65_fu_221_p1;
wire   [4:0] add_ln65_fu_227_p2;
wire   [39:0] zext_ln65_1_fu_224_p1;
wire   [39:0] zext_ln65_2_fu_233_p1;
wire   [39:0] shl_ln65_fu_237_p2;
wire   [38:0] lshr_ln_fu_243_p4;
wire   [0:0] tmp_37_fu_257_p3;
wire   [4:0] sub_ln65_1_fu_273_p2;
wire   [7:0] select_ln65_1_fu_265_p3;
wire  signed [7:0] sext_ln65_fu_279_p1;
wire   [7:0] add_ln65_1_fu_283_p2;
wire   [63:0] zext_ln65_4_fu_253_p1;
wire   [8:0] tmp_30_fu_289_p3;
wire   [63:0] pi_assign_fu_296_p5;
wire   [63:0] grp_fu_148_p1;
wire   [63:0] bitcast_ln735_fu_316_p1;
wire   [63:0] select_ln735_fu_320_p3;
wire   [52:0] zext_ln65_7_cast_fu_354_p3;
wire   [53:0] zext_ln65_7_fu_361_p1;
wire   [53:0] sub_ln65_2_fu_365_p2;
wire   [11:0] zext_ln65_3_fu_351_p1;
wire   [11:0] sub_ln65_3_fu_383_p2;
wire   [6:0] tmp_39_fu_393_p4;
wire   [10:0] trunc_ln65_3_fu_389_p1;
wire   [10:0] add_ln65_2_fu_409_p2;
wire   [10:0] sub_ln65_4_fu_415_p2;
wire   [5:0] tmp_40_fu_439_p4;
wire   [53:0] zext_ln65_5_fu_470_p1;
wire   [53:0] ashr_ln65_fu_473_p2;
wire   [0:0] icmp_ln65_4_fu_458_p2;
wire   [31:0] trunc_ln65_5_fu_478_p1;
wire   [31:0] select_ln65_6_fu_463_p3;
wire   [31:0] zext_ln65_8_fu_455_p1;
wire   [31:0] shl_ln65_1_fu_490_p2;
wire   [0:0] xor_ln65_fu_502_p2;
wire   [0:0] or_ln65_fu_512_p2;
wire   [0:0] xor_ln65_1_fu_516_p2;
wire   [0:0] and_ln65_fu_507_p2;
wire   [0:0] and_ln65_1_fu_522_p2;
wire   [31:0] storemerge4_i_fu_536_p6;
wire   [31:0] storemerge4_i_fu_536_p8;
wire   [31:0] storemerge4_i_fu_536_p9;
wire   [2:0] storemerge4_i_fu_536_p10;
reg    grp_fu_148_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [15:0] tmp_s_fu_209_p0;
wire   [0:0] tmp_s_fu_209_p2;
wire  signed [2:0] storemerge4_i_fu_536_p1;
wire   [2:0] storemerge4_i_fu_536_p3;
wire   [2:0] storemerge4_i_fu_536_p5;
wire   [2:0] storemerge4_i_fu_536_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 i_fu_124 = 11'd0;
#0 ap_done_reg = 1'b0;
end

gcc_phat_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_148_p0),
    .ce(grp_fu_148_ce),
    .dout(grp_fu_148_p1)
);

gcc_phat_ctlz_16_16_1_1 #(
    .din_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
ctlz_16_16_1_1_U7(
    .din(tmp_s_fu_209_p1),
    .dout(tmp_s_fu_209_p3)
);

(* dissolve_hierarchy = "yes" *) gcc_phat_sparsemux_9_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h4 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h2 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h1 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h0 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_9_3_32_1_1_U8(
    .din0(32'd0),
    .din1(trunc_ln65_4_reg_660),
    .din2(storemerge4_i_fu_536_p6),
    .din3(storemerge4_i_fu_536_p8),
    .def(storemerge4_i_fu_536_p9),
    .sel(storemerge4_i_fu_536_p10),
    .dout(storemerge4_i_fu_536_p11)
);

gcc_phat_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln64_fu_159_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_124 <= add_ln64_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_124 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        LD_reg_599 <= LD_fu_308_p1;
        icmp_ln65_1_reg_635 <= icmp_ln65_1_fu_378_p2;
        icmp_ln65_2_reg_642 <= icmp_ln65_2_fu_403_p2;
        icmp_ln65_3_reg_654 <= icmp_ln65_3_fu_429_p2;
        icmp_ln65_5_reg_666 <= icmp_ln65_5_fu_449_p2;
        select_ln65_2_reg_630 <= select_ln65_2_fu_371_p3;
        select_ln65_3_reg_647 <= select_ln65_3_fu_421_p3;
        storemerge4_i_reg_671 <= storemerge4_i_fu_536_p11;
        tmp_31_reg_620 <= {{select_ln735_fu_320_p3[62:52]}};
        tmp_38_reg_614 <= select_ln735_fu_320_p3[32'd63];
        tmp_38_reg_614_pp0_iter5_reg <= tmp_38_reg_614;
        trunc_ln65_1_reg_609 <= trunc_ln65_1_fu_327_p1;
        trunc_ln65_2_reg_625 <= trunc_ln65_2_fu_347_p1;
        trunc_ln65_4_reg_660 <= trunc_ln65_4_fu_435_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln65_reg_579 <= icmp_ln65_fu_181_p2;
        select_ln65_reg_589 <= select_ln65_fu_201_p3;
        tmp_reg_584 <= src_q0[32'd15];
        trunc_ln65_reg_594 <= trunc_ln65_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln65_reg_579_pp0_iter2_reg <= icmp_ln65_reg_579;
        icmp_ln65_reg_579_pp0_iter3_reg <= icmp_ln65_reg_579_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_5 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_5 = i_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        fft_stream_in_blk_n = fft_stream_in_full_n;
    end else begin
        fft_stream_in_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        fft_stream_in_write = 1'b1;
    end else begin
        fft_stream_in_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        grp_fu_148_ce = 1'b1;
    end else begin
        grp_fu_148_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_ce0_local = 1'b1;
    end else begin
        src_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_308_p1 = pi_assign_fu_296_p5[31:0];

assign add_ln64_fu_165_p2 = (ap_sig_allocacmp_i_5 + 11'd1);

assign add_ln65_1_fu_283_p2 = ($signed(select_ln65_1_fu_265_p3) + $signed(sext_ln65_fu_279_p1));

assign add_ln65_2_fu_409_p2 = ($signed(trunc_ln65_3_fu_389_p1) + $signed(11'd2017));

assign add_ln65_fu_227_p2 = (zext_ln65_fu_221_p1 + 5'd9);

assign and_ln65_1_fu_522_p2 = (xor_ln65_1_fu_516_p2 & icmp_ln65_2_reg_642);

assign and_ln65_fu_507_p2 = (xor_ln65_fu_502_p2 & icmp_ln65_3_reg_654);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((fft_stream_in_full_n == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign ashr_ln65_fu_473_p2 = $signed(select_ln65_2_reg_630) >>> zext_ln65_5_fu_470_p1;

assign bitcast_ln735_fu_316_p1 = grp_fu_148_p1;

assign fft_stream_in_din = storemerge4_i_reg_671;

assign grp_fu_148_p0 = LD_reg_599;

assign icmp_ln64_fu_159_p2 = ((ap_sig_allocacmp_i_5 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_378_p2 = ((trunc_ln65_1_reg_609 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_403_p2 = (($signed(tmp_39_fu_393_p4) > $signed(7'd0)) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_429_p2 = ((sub_ln65_3_fu_383_p2 == 12'd31) ? 1'b1 : 1'b0);

assign icmp_ln65_4_fu_458_p2 = ((select_ln65_3_reg_647 < 11'd54) ? 1'b1 : 1'b0);

assign icmp_ln65_5_fu_449_p2 = ((tmp_40_fu_439_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_181_p2 = ((src_q0 == 16'd0) ? 1'b1 : 1'b0);

assign lshr_ln_fu_243_p4 = {{shl_ln65_fu_237_p2[39:1]}};

assign or_ln65_fu_512_p2 = (icmp_ln65_3_reg_654 | icmp_ln65_1_reg_635);

assign pi_assign_fu_296_p5 = {{zext_ln65_4_fu_253_p1[63:32]}, {tmp_30_fu_289_p3}, {zext_ln65_4_fu_253_p1[22:0]}};

assign select_ln65_1_fu_265_p3 = ((tmp_37_fu_257_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln65_2_fu_371_p3 = ((tmp_38_reg_614[0:0] == 1'b1) ? sub_ln65_2_fu_365_p2 : zext_ln65_7_fu_361_p1);

assign select_ln65_3_fu_421_p3 = ((icmp_ln65_2_fu_403_p2[0:0] == 1'b1) ? add_ln65_2_fu_409_p2 : sub_ln65_4_fu_415_p2);

assign select_ln65_6_fu_463_p3 = ((tmp_38_reg_614_pp0_iter5_reg[0:0] == 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln65_fu_201_p3 = ((tmp_fu_187_p3[0:0] == 1'b1) ? sub_ln65_fu_195_p2 : src_q0);

assign select_ln735_fu_320_p3 = ((icmp_ln65_reg_579_pp0_iter3_reg[0:0] == 1'b1) ? 64'd0 : bitcast_ln735_fu_316_p1);

assign sext_ln65_fu_279_p1 = $signed(sub_ln65_1_fu_273_p2);

assign shl_ln65_1_fu_490_p2 = trunc_ln65_4_reg_660 << zext_ln65_8_fu_455_p1;

assign shl_ln65_fu_237_p2 = zext_ln65_1_fu_224_p1 << zext_ln65_2_fu_233_p1;

assign src_address0 = zext_ln64_fu_171_p1;

assign src_ce0 = src_ce0_local;

assign storemerge4_i_fu_536_p10 = {{{icmp_ln65_1_reg_635}, {and_ln65_fu_507_p2}}, {and_ln65_1_fu_522_p2}};

assign storemerge4_i_fu_536_p6 = ((icmp_ln65_4_fu_458_p2[0:0] == 1'b1) ? trunc_ln65_5_fu_478_p1 : select_ln65_6_fu_463_p3);

assign storemerge4_i_fu_536_p8 = ((icmp_ln65_5_reg_666[0:0] == 1'b1) ? shl_ln65_1_fu_490_p2 : 32'd0);

assign storemerge4_i_fu_536_p9 = 'bx;

assign sub_ln65_1_fu_273_p2 = (5'd1 - zext_ln65_fu_221_p1);

assign sub_ln65_2_fu_365_p2 = (54'd0 - zext_ln65_7_fu_361_p1);

assign sub_ln65_3_fu_383_p2 = (12'd1075 - zext_ln65_3_fu_351_p1);

assign sub_ln65_4_fu_415_p2 = (11'd31 - trunc_ln65_3_fu_389_p1);

assign sub_ln65_fu_195_p2 = (16'd0 - src_q0);

assign tmp_30_fu_289_p3 = {{tmp_reg_584}, {add_ln65_1_fu_283_p2}};

assign tmp_37_fu_257_p3 = shl_ln65_fu_237_p2[32'd25];

assign tmp_39_fu_393_p4 = {{sub_ln65_3_fu_383_p2[11:5]}};

assign tmp_40_fu_439_p4 = {{select_ln65_3_fu_421_p3[10:5]}};

assign tmp_fu_187_p3 = src_q0[32'd15];

assign tmp_s_fu_209_p1 = ((tmp_fu_187_p3[0:0] == 1'b1) ? sub_ln65_fu_195_p2 : src_q0);

assign trunc_ln65_1_fu_327_p1 = select_ln735_fu_320_p3[62:0];

assign trunc_ln65_2_fu_347_p1 = select_ln735_fu_320_p3[51:0];

assign trunc_ln65_3_fu_389_p1 = sub_ln65_3_fu_383_p2[10:0];

assign trunc_ln65_4_fu_435_p1 = select_ln65_2_fu_371_p3[31:0];

assign trunc_ln65_5_fu_478_p1 = ashr_ln65_fu_473_p2[31:0];

assign trunc_ln65_fu_217_p1 = tmp_s_fu_209_p3[3:0];

assign xor_ln65_1_fu_516_p2 = (or_ln65_fu_512_p2 ^ 1'd1);

assign xor_ln65_fu_502_p2 = (icmp_ln65_1_reg_635 ^ 1'd1);

assign zext_ln64_fu_171_p1 = ap_sig_allocacmp_i_5;

assign zext_ln65_1_fu_224_p1 = select_ln65_reg_589;

assign zext_ln65_2_fu_233_p1 = add_ln65_fu_227_p2;

assign zext_ln65_3_fu_351_p1 = tmp_31_reg_620;

assign zext_ln65_4_fu_253_p1 = lshr_ln_fu_243_p4;

assign zext_ln65_5_fu_470_p1 = select_ln65_3_reg_647;

assign zext_ln65_7_cast_fu_354_p3 = {{1'd1}, {trunc_ln65_2_reg_625}};

assign zext_ln65_7_fu_361_p1 = zext_ln65_7_cast_fu_354_p3;

assign zext_ln65_8_fu_455_p1 = select_ln65_3_reg_647;

assign zext_ln65_fu_221_p1 = trunc_ln65_reg_594;

endmodule //gcc_phat_load
